/* 
   SparkFun SIKIO - Circuit 3
   Hardware Concept: PWM output
   Android Concept: Screen Touch Control
   CC BY-SA, http://creativecommons.org/licenses/by-sa/3.0/
   
   PURPOSE:
   This example shows how to play sounds from a piezo speaker using a PWM output on the IOIO. The sounds are generated by 
   touch events on a drawn piano keyboard. 
   
   HARDWARE:
   -piezo speaker
   
   OPERATION: 
   Plug the speaker into pin 11 on the IOIO. When the app opens, you should see a piano keyboard. Hit different 
   white keys to play different notes. The black keys do not generate any sound, we will leave that up to you to figure out.
*/

import ioio.lib.spi.*;
import ioio.lib.api.*;
import ioio.lib.util.*;
import ioio.lib.util.android.*;
import ioio.lib.android.bluetooth.*;
import ioio.lib.impl.*;
import sikio.*;
import ioio.lib.android.accessory.*;
import ioio.lib.api.exception.*;

// Import library for Android screen touch events
import android.view.MotionEvent; 

int freq = 523; // Variable to keep track of note frequency
boolean playTone; // Variable to keep track of whether a note should be played or not

void setup() 
{
  new SikioManager(this).start();
}

void draw() {

  // Set background to black.
  background(0, 0, 0);

  // Draw the white keys.
  fill(255);
  stroke(155);
  rect(50, 10, 50, height); // c
  rect(100, 10, 50, height); // d
  rect(150, 10, 50, height); // e
  rect(200, 10, 50, height); // f
  rect(250, 10, 50, height); // g
  rect(300, 10, 50, height); // a
  rect(350, 10, 50, height); // b
  rect(400, 10, 50, height); // c

  // Draw the black keys, for looks, no current functional implementation.
  fill(0);
  rect(75, 10, 50, 300); // c#
  rect(125, 10, 50, 300); // d#
  rect(225, 10, 50, 300); // f#
  rect(275, 10, 50, 300); // g#
  rect(325, 10, 50, 300); // a#
}

// This is called when there is a touch event.
public boolean surfaceTouchEvent(MotionEvent event) {  

  // There was a touch event - what kind?
  int action = event.getAction();

  // Get the X position of where the touch was, so we know which note to play.
  int pos = (int)event.getX();

  // If the action was a touch on the screen, play a note based on the positon of the touch.
  if (action == MotionEvent.ACTION_DOWN) {

    // Checks if you hit left most key
    // If so set the frequency of the tone to be played as well as the status variable to tell it to play a note
    if (pos < 100) {
      freq = 523;
      playTone = true; 
    }  

    if (pos >= 100 && pos < 150) {
      freq = 587;
      playTone = true; 
    }

    if (pos >= 150 && pos < 200) {
      freq = 659;
      playTone = true; 
    }

    if (pos >= 200 && pos < 250) {
      freq = 698;
      playTone = true; 
    }

    if (pos >= 250 && pos < 300) {
      freq = 784;
      playTone = true; 
    }

    if (pos >= 300 && pos < 350) {
      freq = 880;
      playTone = true; 
    }

    if (pos >= 350 && pos < 400) {
      freq = 988;
      playTone = true; 
    }
    if (pos > 400) {
      freq = 1047;
      playTone = true; 
    }
  }

  // If you want the variables for motionX/motionY, mouseX/mouseY etc.
  // to work properly, you'll need to call super.surfaceTouchEvent().
  return super.surfaceTouchEvent(event);
}

